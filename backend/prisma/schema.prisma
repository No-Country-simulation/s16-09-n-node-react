generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Calendar {
  id        String    @id @default(cuid())
  name      String
  events    Event[]
  company   Company[]
  project   Project[]
  meetings  Meeting[]
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Company {
  id         String     @id @default(cuid())
  name       String
  calendarId String?
  calendar   Calendar?  @relation(fields: [calendarId], references: [id])
  users      User[]
  documents  Document[]
  project    Project[]
  isActive   Boolean    @default(true)
  createdAt  DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Document {
  id        String   @id @default(cuid())
  name      String
  url       String
  projectId String?
  companyId String?
  project   Project? @relation(fields: [projectId], references: [id])
  company   Company? @relation(fields: [companyId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Event {
  id         String   @id @default(cuid())
  name       String
  date       DateTime
  calendarId String
  calendar   Calendar @relation(fields: [calendarId], references: [id])
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Meeting {
  id          String    @id @default(cuid())
  name        String
  description String?
  link        String
  dateTime    DateTime
  calendarId  String?
  projectId   String?
  calendar    Calendar? @relation(fields: [calendarId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Milestone {
  id          String          @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  targetDate  DateTime?
  completed   Boolean         @default(false)
  status      MilestoneStatus @default(OPEN)
  projectId   String
  project     Project         @relation(fields: [projectId], references: [id])
  tasks       Task[]
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(3)

  @@unique([projectId, name])
}

enum MilestoneStatus {
  OPEN
  CLOSED
  UPCOMING
  EXPIRED
  COMPLETED
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  companyId    String
  calendarId   String?
  company      Company       @relation(fields: [companyId], references: [id])
  calendar     Calendar?     @relation(fields: [calendarId], references: [id])
  userProjects UserProject[]
  milestones   Milestone[]
  tasks        Task[]
  meeting      Meeting[]
  document     Document[]
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Role {
  id          String        @id @default(cuid())
  name        String        @unique
  userProject UserProject[]
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Skill {
  id         String      @id @default(cuid())
  name       String      @unique
  level      String?
  userSkills UserSkill[]
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Status {
  id        String   @id @default(cuid())
  name      String   @unique
  task      Task[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}

model Task {
  id          String     @id @default(cuid())
  name        String
  description String?
  dueDate     DateTime?
  statusId    String
  userId      String?
  projectId   String
  milestoneId String?
  status      Status     @relation(fields: [statusId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  project     Project    @relation(fields: [projectId], references: [id])
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(3)
}

model User {
  id           String        @id @default(cuid())
  clerkId      String?       @unique
  username     String?       @unique
  email        String        @unique
  password     String
  name         String?
  lastName     String?
  isAdmin      Boolean       @default(false)
  location     String?
  timezone     String?
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  userProjects UserProject[]
  userSkills   UserSkill[]
  tasks        Task[]
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
}

model UserProject {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  roleId    String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@unique([userId, projectId])
}

model UserSkill {
  id        String   @id @default(cuid())
  level     String?
  userId    String
  skillId   String
  user      User     @relation(fields: [userId], references: [id])
  skill     Skill    @relation(fields: [skillId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  @@unique([userId, skillId])
}
